{"version":3,"file":"static/webpack/static/development/pages/business.js.68340475a714a9edd0d6.hot-update.js","sources":["webpack:///./pages/business/index.js"],"sourcesContent":["import React, { Component } from \"react\"\nimport { withRouter } from \"next/router\"\nimport { connect } from \"react-redux\"\nimport {\n  getMyGotoBusinessById,\n  createPaymentMyGoto\n} from \"../../src/reduxHelper\"\nimport { validatePayment } from \"./validate\"\nimport wrapper from \"../wrapper\"\nimport { Row, Col, Card, notification, message } from \"antd\"\nimport Loader from \"../../src/components/atoms/loading\"\nimport CsrTemplate from \"../../src/components/templates/csrTemplate\"\nimport MyGotoPayment from \"../../src/components/organisms/forms/myGotoPayment\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      formData: {},\n      cart: [],\n      totalAmount: 0\n    }\n  }\n\n  componentDidMount() {\n    this.props.getMyGotoBusinessById(this.props.router.query.bid)\n\n    let aScript = document.createElement(\"script\")\n    aScript.type = \"text/javascript\"\n    aScript.src = \"https://checkout.razorpay.com/v1/checkout.js\"\n\n    document.head.appendChild(aScript)\n  }\n\n  handlePayment = () => {\n    let formData = this.state.formData\n    let amount = this.state.totalAmount\n    let businessId = this.props.router.query.id\n    let cart = this.state.cart\n    let paymentFunc = this.props.createPaymentMyGoto\n    let data = {\n      ...formData,\n      amount: amount,\n      fk_business_id: businessId,\n      //pk_payment_id: response.razorpay_payment_id,\n      cart: cart\n    }\n\n    validatePayment(data)\n      .then(validate => {\n        if (validate === \"validate\") {\n          let options = {\n            key: \"rzp_live_MlgUcfBEMLoLme\",\n            //key: \"rzp_test_IWXggiN4CqBvCo\",\n            amount: amount * 100,\n            currency: \"INR\",\n            name: \"MyGoto\",\n            description: \"Pay for your gift card.\",\n            payment_capture: \"1\",\n            image:\n              \"https://file-upload-123.s3.ap-south-1.amazonaws.com/brandImages/1585596282121-mygoto.jpeg\",\n            prefill: {\n              name: formData.name,\n              email: formData.email\n            },\n            notes: {\n              address: \"Hello World\"\n            },\n            theme: {\n              color: \"#1E4ED6\"\n            },\n            handler: function(response) {\n              data[\"pk_payment_id\"] = response.razorpay_payment_id\n              paymentFunc(data)\n                .then(res => {\n                  notification[\"success\"]({\n                    message: \"Success\",\n                    description:\n                      \"The gift cards has been sent to your email and mobile number, please check in spam if not received\"\n                  })\n                })\n                .catch(err => {\n                  notification[\"error\"]({\n                    message: \"Error\",\n                    description: \"Some problem occured. Please try again.\"\n                  })\n                })\n            }\n          }\n\n          let rzp = new window.Razorpay(options)\n          rzp.open()\n        }\n      })\n      .catch(err => {\n        message.error(\"\" + err)\n        //this.setState({ apiRequestLoading: false })\n      })\n  }\n\n  handleValue = e => {\n    let obj = {}\n    obj[e.target.name] = e.target.value\n    this.setState({ formData: { ...this.state.formData, ...obj } })\n  }\n\n  handleGiftCard = amount => {\n    console.log(amount.target.value)\n    let cart = this.state.cart\n    cart.push({\n      amount: amount.target.value,\n      quantity: 1\n    })\n    this.setState({ cart: cart })\n    this.setState({ totalAmount: amount.target.value })\n  }\n\n  handleAmount = e => {\n    let totalAmount = 0\n    let cart = this.state.cart\n\n    // Check if amount already exist\n    cart.map((item, index) => {\n      if (item.amount === e.target.name) cart.splice(index, 1)\n    })\n\n    // Check if value is null\n    if (e.target.value != \"\") {\n      cart.push({\n        amount: e.target.name,\n        quantity: e.target.value\n      })\n      this.setState({\n        cart: cart\n      })\n    }\n\n    this.state.cart.map(item => {\n      totalAmount = totalAmount + item.amount * item.quantity\n    })\n    this.setState({ totalAmount: totalAmount })\n  }\n\n  render() {\n    if (this.props.myGotoBusinessById.isLoaded)\n      return (\n        <CsrTemplate\n          diplaySearch={false}\n          diplayBusinessDetails={true}\n          // background={`url(${this.props.myGotoBusinessById.response.data.data.image})`}\n          background={`url(${this.props.myGotoBusinessById.response.data.data.image})`}\n          displayFilter={false}\n          businessName={this.props.myGotoBusinessById.response.data.data.name}\n        >\n          <Row>\n            <Col sm={16}>\n              <Row gutter={[16, 16]}>\n                <Col xs={8}>\n                  <h3>Locality</h3>\n                  <p>\n                    {this.props.myGotoBusinessById.response.data.data.locality}\n                  </p>\n                </Col>\n                <Col xs={8}>\n                  <h3>City</h3>\n                  <p>{this.props.myGotoBusinessById.response.data.data.city}</p>\n                </Col>\n                <Col xs={8}>\n                  <h3>State</h3>\n                  <p>\n                    {this.props.myGotoBusinessById.response.data.data.state}\n                  </p>\n                </Col>\n              </Row>\n              <br />\n              <h3>About</h3>\n              <p>\n                {this.props.myGotoBusinessById.response.data.data.description}\n              </p>\n              <br />\n              <h3>Address</h3>\n              <p>{this.props.myGotoBusinessById.response.data.data.address}</p>\n            </Col>\n            <Col sm={8}>\n              <Card hoverable style={{ width: \"100%\" }}>\n                <MyGotoPayment\n                  amount={this.state.totalAmount}\n                  handleAmount={this.handleGiftCard}\n                  handlePayment={this.handlePayment}\n                  handleValue={this.handleValue}\n                />\n              </Card>\n            </Col>\n          </Row>\n          {/* Business {this.props.router.query.id} */}\n\n          <br />\n          <br />\n          {/* <script src=\"https://checkout.razorpay.com/v1/checkout.js\"></script> */}\n        </CsrTemplate>\n      )\n    else return <Loader />\n  }\n}\n\nconst mapStateToProps = state => ({\n  myGotoBusinessById: state.getMyGotoBusinessById\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getMyGotoBusinessById: bId => dispatch(getMyGotoBusinessById.action(bId)),\n  createPaymentMyGoto: data => dispatch(createPaymentMyGoto.action(data))\n})\n\nexport default wrapper(\n  connect(mapStateToProps, mapDispatchToProps)(withRouter(App))\n)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AALA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AApCA;AAuCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApFA;AAsFA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA1FA;AA4FA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AArGA;AAuGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA7HA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AA+GA;AACA;AAGA;AACA;AAFA;AAIA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AAIA;AAAA;AAgBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAiBA;;;;AA5LA;AACA;AA8LA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AAIA;;;;A","sourceRoot":""}